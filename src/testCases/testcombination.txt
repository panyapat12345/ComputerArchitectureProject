lw 0 6 one @6 = 1
lw 0 1 n @1 = input[n]
lw 0 2 r @2 = input[r]
sw 5 1 stack store n to stack
add 5 6 5 increase stack pointer
sw 5 2 stack store r to stack
add 5 6 5 increase stack pointer
lw 0 4 comAdr prepare to call Comb
jalr 4 7 Call Comb
end halt end
Comb lw 0 6 neg1 @6 = -1
add 5 6 5 decrease stack pointer
lw 5 2 stack load @1 = r from stack
add 5 6 5 decrease stack pointer
lw 5 1 stack load @2 = n from stack
beq 0 2 Loop if r = 0 go to Loop
beq 1 2 Loop if n = r go to Loop
lw 0 6 neg1 @6 = -1
add 1 6 4 @4 = n-1
lw 0 6 one @6 = 1
sw 5 4 stack store n-1 to stack
add 5 6 5 increase stack pointer
lw 0 6 neg1 @6 = -1
add 2 6 4 @4 = r-1
lw 0 6 one @6 = 1
sw 5 4 stack store r-1 to stack
add 5 6 5 increase stack pointer
lw 0 6 neg1 @6 = -1
add 1 6 4 @4 = n-1
lw 0 6 one @6 = 1
sw 5 4 stack store n-1 to stack
add 5 6 5 increase stack pointer
add 2 0 4 @4 = r
sw 5 4 stack store r to stack
add 5 6 5 increase stack pointer
lw 0 4 comAdr prepare to call
jalr 4 6 jump to Comb
Loop lw 0 6 one @6 = 1
add 3 6 3 @3 += 1 (basecase)
lw 0 4 comAdr @4 store Comb
beq 5 0 end if stack go to 0 then go to end of the program
jalr 4 6 if stack is not = 0 then save pc+1 to $6
jalr 7 6 return
comAdr .fill Comb
one .fill 1
neg1 .fill -1
LAdr .fill Loop
n .fill 7 input
r .fill 3 input
stack .fill 0